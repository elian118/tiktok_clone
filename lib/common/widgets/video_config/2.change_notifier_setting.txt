2. ChangeNotifier

전역형상을 관리하는 방법 중 하나로, 리스너블(Listenable) 추상클래스를 활용한다.

리스너블 추상클래스는 애니메이션 관련 위젯에서 컨트롤러를 재정의할때 주로 사용되는데,
상속된 클래스가 보유한 필드의 정보를 실시간 추적해
변경 현황을 모든 위젯에 시시각각 알려주는 고유 이벤트 리스너를 제공한다.

그리고 ChangeNotifier 는 notifyListeners()를 사용해서 전역형상 관리 방법으로 응용한 것이다.

InheritedWidget 과 다르게, ChangeNotifier 는 데이터가 바뀐 위젯만 리빌드하므로 성능 부담이 적고
구현에 필요한 코드량도 아주 적다.

    * video_config_inherit.dart 참고

이렇게만 구현해두면 아래처럼 다른 위젯에서 가져다 쓰기도 간단해서
관리하는 전역 필드들이 늘수록 관리 효율이 높아지는 장점이 있다.

    AnimatedBuilder(
        animation: videoConfig, // ChangeNotifier 는 리스너 타입으로 인식 가능 -> 애니메이션 컨트롤러나 마찬가지
        builder: (BuildContext context, Widget? child) =>
            SwitchListTile.adaptive(
                value: videoConfig.autoMute,
                onChanged: (value) => videoConfig.toggleAutoMute(),
                title: const Text('Auto Mute'),
                subtitle: const Text('Video will be muted by default,'),
            ),
    ),

* 여기서 AnimatedBuilder 를 랩핑하지 않으면 onChanged 콜백이 실행되도 변화가 없으므로 꼭 넣어야 한다.

뜬금 없이, 왜 AnimatedBuilder 가 여기서 나오냐 의문이겠지만,
플러터 공식문서에 가면 실제로 같이 쓰라고 안내돼 있다.
특히, ChangeNotifier 와 AnimatedBuilder 둘을 같이 써야 성능 향상에 도움이 된단다.

    https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html
        -> Improve rebuilds performance using AnimatedBuilder 단락 참고

굳이, AnimatedBuilder 를 안 쓰겠다면,
ChangeNotifier 를 참조할 StatefulWidget initState()에 리스너를 추가하고
해당 StatefulWidget state와 리스너를 서로 연동하면 된다.

  // video_post.dart
  ...
  bool _autoMute = videoConfig.autoMute;
  ...

  @override
    void initState() {
        ...
        // ChangeNotifier 리스너 추가
        videoConfig.addListener(() {
          _autoMute = videoConfig.autoMute;
          setState(() {});
        });
    }
  ...

    IconButton(
      icon: FaIcon(
        _autoMute
          ? FontAwesomeIcons.volumeXmark
          : FontAwesomeIcons.volumeHigh,
        color: Colors.white,
      ),
      onPressed: videoConfig.toggleAutoMute,
    ),

아무래도 처음 방식인 AnimatedBuilder 를 쓰는 게 훨씬 나아 보인다.

--------------------------------------------------------------------------------

만약, ChangeNotifier 를 더 간단하게 싶다면 provider 패키지를 설치 후
ChangeNotifierProvider 클래스를 사용하면 된다.

    https://pub.dev/packages/provider

provider + ChangeNotifier 조합은 아주 편리해서 지금도 널리 쓰고 있는 방식이다.

    1) ChangeNotifier 선언

    예를 들어, provider 패키지 설치 직후
    ChangeNotifier 상속 클래스를 아래와 같이 설정했을 때는
    final VideoConfig videoConfig; 코드로 클래스 자체를 공개할 필요 없이,
    아래와 같이 초기화와 세터 코드만 있으면 충분하다.

    // video_config_change_notifier.dart
    class VideoConfig extends ChangeNotifier {
      bool isMuted = false;
      bool isAutoplay = false;

      void toggleMute() {
        isMuted = !isMuted; // build() 안에서 작동하는 게 아니므로, setState 불필요
        notifyListeners(); // 대신, 데이터가 변경됐음을 알리는 리스너를 꼭 붙여야 한다.
      }

      void toggleAutoPlay() {
        isAutoplay = !isAutoplay;
        notifyListeners();
      }
    }

    2) ChangeNotifierProvider 주입

    그리고 실제 모든 위젯에서 이 코드에 접근이 가능하려면
    main.dart > build() 메소드 최상단에 MultiProvider 를 랩핑해
    ChangeNotifier 상속 클래스를 프로바이더 속성으로 주입한다.
        -> 이때 ChangeNotifier 상속 클래스이므로, ChangeNotifierProvider 사용

    // main.dart
    @override
      Widget build(BuildContext context) {
        // 다수의 프로버이더를 한 번에 주입할 경우, MultiProvider 사용
        // (단일 프로바이더만 주입한다면 Provider 사용해도 무관)
        return MultiProvider(
          providers: [
            ChangeNotifierProvider(
              create: (BuildContext context) => VideoConfig(), // 주입
            ),
            ChangeNotifierProvider(
              create: (BuildContext context) => DarkModeConfig(),
            ),
          ],
          child: const MyApp(),
        );
      }

    3) ChangeNotifier 접근 -> context

    모든 설정이 완벽하다면 이후, 자식 위젯에서 ChangeNotifier 접근은 context 를 통해서 가능하다.

    필드 참조는 context.watch(), 세터 메서드는 context.read()를 사용한다.
    (video_config_change_notifier.dart -> final VideoConfig videoConfig 선언 불필요한 이유)

    // setting_screen.dart
    SwitchListTile.adaptive(
      value: context.watch<VideoConfig>().isMuted, // 참조
      onChanged: (value) => context.read<VideoConfig>().toggleMute(), // 세터 호출
      title: const Text('Auto Mute'),
      subtitle: const Text('Video will be muted by default.'),
    ),