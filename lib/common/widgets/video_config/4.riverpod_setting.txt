2. riverpod

전역형상을 관리하는 방법 중 하나로,
리스너블(Listenable) 추상클래스를 활용하는 Provider 를 개량한 외부 프레임워크.

Provider 보다 훨씬 간단하며, 플러터 외부에서 전역 형상을 관리할 수 있다.

설정법

1) main.dart > runApp() > 앱 ProviderScope 랩핑

    void main() async {
      // runApp() 실행 전에 위젯 바인딩을 먼저
      WidgetsFlutterBinding.ensureInitialized();
      ...
      runApp(const ProviderScope(child: TickTokApp()));
    }
    ...

2) ConsumerWidget 또는 ConsumerStatefulWidget 상속

    1. ConsumerWidget: StatelessWidget 컨텍스트 소비자

        class TickTokApp extends ConsumerWidget {
            ...

            // -> build 메서드 두번째 인자로 WidgetRef ref 추가 후 접근
            //    build 메서드 안에서만 ref 사용 가능
            @override
            Widget build(BuildContext context, WidgetRef ref) {
                SwitchListTile.adaptive(
                    value: ref.watch(playbackConfigProvider).darkMode,
                    onChanged: (value) => ref
                        .read(playbackConfigProvider.notifier)
                        .setDarkMode(value),
                    ...
                  ),
                  ...
                }
        }

    2. ConsumerStatefulWidget: StatefulWidget 컨텍스트 소비자

        class VideoPost extends ConsumerStatefulWidget {
          ...

          @override
          VideoPostState createState() => VideoPostState();
        }

        class VideoPostState extends ConsumerState<VideoPost> {
          ...
          // -> build 메서드 변형 불필요, 클래스 내 모든 곳에서 ref 사용 가능
          void _onPlaybackConfigChanged({bool toggle = false}) {
            if (!mounted) return;
            _isMute = toggle ? !_isMute : ref.read(playbackConfigProvider).muted;
            _videoPlayerController.setVolume(_isMute ? 0 : 1);
            setState(() {});
          }

          @override
          Widget build(BuildContext context) {
            ...
          }
        }



3) ref 로 접근

    ref.watch(프로바이더).변수 -> 변수에 캐싱된 값 가져오기
    ref.read(프로바이더.notifier).메소드 -> 프로바이더 메소드(세터) 호출

    1. ConsumerWidget 상속인 경우,
       build 메서드 두번째 인자로 WidgetRef ref 추가

      SwitchListTile.adaptive(
        value: ref.watch(playbackConfigProvider).darkMode,
        onChanged: (value) => ref
            .read(playbackConfigProvider.notifier)
            .setDarkMode(value),
        ...
      )


4) API 호출을 위한 비동기 데이터 형상 관리 -> AsyncNotifier

    비동기 데이터를 반영해야 하는 모델은 AsyncNotifier 를 상속받는다.

    // timeline_view_model.dart
    class TimelineViewModel extends AsyncNotifier<List<VideoModel>> {
      List<VideoModel> _list = [
        // 임시 데이터 -> api 연동 후 없앨 예정
        for (var rawVideo in rawVideos) VideoModel(title: rawVideo),
      ];

      void uploadVideo() async {
        state = const AsyncValue.loading(); // 데이터를 가져오기 전까지 초기값을 로딩상태로 만든다.
        await Future.delayed(const Duration(seconds: 2)); // 2초 후에 데이터가 온다고 가정(테스트)
        final newVideo = VideoModel(title: '${DateTime.now()}');

        _list = [..._list, newVideo];

        // AsyncNotifier 상속 클래스 -> AsyncValue.data(newValue) 사용해 변경. state = _list 불가.
        state = AsyncValue.data(_list);
      }

      @override
      FutureOr<List<VideoModel>> build() async {
        await Future.delayed(const Duration(seconds: 5)); // 5초 후에 데이터가 온다고 가정(테스트)
        return _list;
      }
    }

    // export
    final timelineProvider =
        AsyncNotifierProvider<TimelineViewModel, List<VideoModel>>(
      () => TimelineViewModel(), // 뷰 모델 초기화
    );

    이후, 위 비동기 뷰 모델을 import 하는 widget 들은
    2) -> 3)과 과정 동일하게 참조 또는 메서드를 호출하면 된다.