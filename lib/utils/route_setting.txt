앱과 함께 웹을 동시 지원하는 Navigator2 등장 이후 GoRouter()를 사용하게 되면서부터
아래 앱 전용으로만 개발된 Navigator1 기반 화면 이동 방식들은 전부 구식이 됐다.

1) pushNamed: 특정 이름이 붙은 화면으로 라우트하는 방식

  await Navigator.of(context).pushNamed(routeName, arguments: EmailScreenParams(userName: _username));

  참고: 위 코드 두 번째 인자 arguments 는 옵션이며,
  입력된 값들은 인자를 입력받은 위젯에서 아래 코드로 인자 정보를 가져올 수 있다.

    ModalRoute.of(context)!.settings.arguments as EmailScreenParams;

  그리고, 이 방식은 main.dart > MaterialApp 안에 화면별 라우트 설정을 입력해야 사용 가능하다.

    @override
    Widget build(BuildContext context) {
      return MaterialApp(
        ...
        initialRoute: SignUpScreen.routeName, // 첫 화면
        routes: {
          SignUpScreen.routeName: (context) => const SignUpScreen(),
          UsernameScreen.routeName: (context) => const UsernameScreen(),
          LoginScreen.routeName: (context) => const LoginScreen(),
          EmailScreen.routeName: (context) => const EmailScreen(),
          ...
        };
      );

2) MaterialPageRoute: 지정된 위젯을 불러오는 방식

  await Navigator.of(context).push(
    MaterialPageRoute(
      builder: (context) => widget,
      fullscreenDialog: isFullScreenDialog ?? false, // 꽉찬 다이얼로그로 표시 여부 설정
    ),
  );

3) PageRouteBuilder: 2)번과 유사하나, 화면 이동 시 애니메이션을 직접 설정할 수 있는 방식

  await Navigator.of(context).push(
    PageRouteBuilder(
      transitionDuration: const Duration(milliseconds: 500),
      reverseTransitionDuration:
          const Duration(milliseconds: 500), // 뒤로가기 작동 애니메이션 시간
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        // 위치 이동 애니메이션
        final offsetAnimation = Tween(
          begin: const Offset(1, 0),
          end: Offset.zero,
        ).animate(animation);
        // 투명도 애니메이션
        final opacityAnimation = Tween(
          begin: 0.5,
          end: 1.0,
        ).animate(animation);

        return SlideTransition(
          position: offsetAnimation,
          child: FadeTransition(
            opacity: opacityAnimation,
            child: child,
          ),
        );
      },
      pageBuilder: (context, animation, secondaryAnimation) => widget,
      fullscreenDialog: isFullScreenDialog ?? false, // 꽉찬 다이얼로그로 표시 여부 설정
    ),

    await Navigator.of(context).pushAndRemoveUntil(
      MaterialPageRoute(builder: (context) => widget),
    );

--------------------------------------------------------------------------

  실제로, 플러터 공식 홈에서는 1) pushNamed 방식을 지양하라고 공지하고 있다.

  플러터에 따르면, pushNamed(routeName, arguments: args)는
   url 을 직접 입력해 원하는 페이지로 이동이 가능한 반면에,
   웹 브라우저의 뒤로가기 기능을 지원하지 않는다고 한다. -> 버튼 눌러도 동작 안 함

  반면에, 2) 또는 3) 방식은 웹 브라우저의 뒤로가기 기능을 지원하지만,
   -> 페이지 이동 후 url 변경이 되질 않고 그대로다.
   -> 즉, 사용자가 웹 브라우저에서 url 을 직접 입력해 원하는 페이지로 이동할 수 없다.

   go_router 패키지는 이러한 문제 해결을 위해 배포됐으며,
   일반적인 웹 라우팅 방식처럼 파라미터까지 path 안에 중첩적으로 입력할 수 있다.

    Ex. /user/video/:username/:id

--------------------------------------------------------------------------

4) go_router: 웹에서도 호환 가능한 라우트 패키지

    이 방식을 쓰려면 먼저 go_router 패키지를 설치한다.
    이후, main.dart >  MaterialApp 을 MaterialApp.router 로 변경한다.

     @override
     Widget build(BuildContext context) {
        return MaterialApp.router(
         ...

    라우트를 사용할 위젯에서는 아래 코드를 입력하면 된다.

    context.push(location) // 페이지 이동 -> 스택 추가
    context.go(location) // 페이지 이동 -> 기존 스택 관계 단절(뒤로가기 사용 불가)
    context.pop(); // 뒤로가기 -> context.push(location)로 이동한 페이지에서만 사용 가능


